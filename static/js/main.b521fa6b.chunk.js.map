{"version":3,"sources":["Display.jsx","Pad.jsx","Calculator.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Display","props","id","display","lastValue","Pad","value","operator","setDisplay","setLastValue","setOperator","calculate","op","parseFloat","toString","clickNumber","hasDisplay","hasOperator","lastValueIsZero","includes","concat","substr","operatorHandler","className","onClick","Calculator","useState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b521fa6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Display.css';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div id=\"display\">{(props.display === \"0\" || props.display === \"\") ? props.lastValue : props.display}</div>\r\n    )\r\n}\r\n\r\nexport default Display;\r\n","import React from 'react';\r\nimport './Pad.css';\r\n\r\nconst Pad = ({display, lastValue, operator, setDisplay, setLastValue, setOperator}) => {\r\n    const calculate = (op) => {\r\n\t\treturn () => {\r\n\t\t\tif (op === \"+\") {\r\n\t\t\t\tsetLastValue((parseFloat(lastValue) + parseFloat(display)).toString());\r\n\t\t\t}\r\n\t\t\tif (op === \"-\") {\r\n\t\t\t\tsetLastValue((parseFloat(lastValue) - parseFloat(display)).toString());\r\n\t\t\t}\r\n\t\t\tif (op === \"*\") {\r\n\t\t\t\tsetLastValue((parseFloat(lastValue) * parseFloat(display)).toString());\r\n\t\t\t}\r\n\t\t\tif (op === \"/\") {\r\n\t\t\t\tsetLastValue((parseFloat(lastValue) / parseFloat(display)).toString());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst clear = () => {\r\n\t\tsetDisplay(\"0\");\r\n\t\tsetLastValue(\"0\");\r\n\t\tsetOperator(\"\");\r\n\t}\r\n\r\n\tconst clickNumber = (value) => {\r\n        const hasDisplay = display !== \"\";\r\n        const hasOperator = operator !== \"\";\r\n        const lastValueIsZero = lastValue === \"0\";\r\n\r\n\t\treturn () => {\r\n\t\t\tif (!hasDisplay && !lastValueIsZero && !hasOperator) {\r\n\t\t\t\tsetLastValue(\"0\");\r\n\t\t\t\tsetDisplay(parseFloat(display.toString().concat(value)).toString().substr(0, 16));\r\n\t\t\t} else if (display.includes(\".\") && value === \"0\") {\r\n\t\t\t\tsetDisplay(display.concat(value));\r\n\t\t\t} else {\r\n\t\t\t\tsetDisplay(parseFloat(display.toString().concat(value)).toString().substr(0, 16));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst operatorHandler = (op) => {\r\n\t\treturn () => {\r\n\t\t\tconst hasDisplay = display !== \"\";\r\n\t\t\tconst hasOperator = operator !== \"\";\r\n\t\t\tconst lastValueIsZero = lastValue === \"0\";\r\n\r\n\t\t\tif (op === \"-\") {\r\n\t\t\t\tif (!hasDisplay && hasOperator && !lastValueIsZero) {\r\n\t\t\t\t\tsetDisplay(\"-\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsetOperator(op);\r\n\t\t\t\r\n\t\t\tif (op !== \"-\") {\r\n\t\t\t\tif (display === \"-\") {\r\n\t\t\t\t\tsetDisplay(\"\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif (hasDisplay) {\r\n\t\t\t\tsetDisplay(\"\");\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (hasOperator) {\r\n\t\t\t\tsetLastValue(calculate(operator));\r\n\t\t\t} else {\r\n\t\t\t\tsetLastValue(display);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst equals = (op) => {\r\n\t\treturn () => {\r\n\t\t\tif (operator === \"\" || display === \"\") {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetLastValue(calculate(operator));\r\n\t\t\tsetDisplay(\"\");\r\n\t\t\tsetOperator(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\tconst decimal = (value) => {\r\n\t\treturn () => {\r\n\t\t\tif (!display.includes(\".\")) {\r\n\t\t\t\tsetDisplay(display.concat(value));\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    \r\n    return (\r\n        <div className=\"gridContainer\">\r\n            <button id=\"zero\" className=\"number\" onClick={clickNumber(\"0\")}>0</button>\r\n            <button id=\"one\" className=\"number\" onClick={clickNumber(\"1\")}>1</button>\r\n            <button id=\"two\" className=\"number\" onClick={clickNumber(\"2\")}>2</button>\r\n            <button id=\"three\" className=\"number\" onClick={clickNumber(\"3\")}>3</button>\r\n            <button id=\"four\" className=\"number\" onClick={clickNumber(\"4\")}>4</button>\r\n            <button id=\"five\" className=\"number\" onClick={clickNumber(\"5\")}>5</button>\r\n            <button id=\"six\" className=\"number\" onClick={clickNumber(\"6\")}>6</button>\r\n            <button id=\"seven\" className=\"number\" onClick={clickNumber(\"7\")}>7</button>\r\n            <button id=\"eight\" className=\"number\" onClick={clickNumber(\"8\")}>8</button>\r\n            <button id=\"nine\" className=\"number\" onClick={clickNumber(\"9\")}>9</button>\r\n            <button id=\"add\" className=\"operator\" onClick={operatorHandler(\"+\")}>+</button>\r\n            <button id=\"subtract\" className=\"operator\" onClick={operatorHandler(\"-\")}>-</button>\r\n            <button id=\"multiply\" className=\"operator\" onClick={operatorHandler(\"*\")}>*</button>\r\n            <button id=\"divide\" className=\"operator\" onClick={operatorHandler(\"/\")}>/</button>\r\n            <button id=\"decimal\" className=\"number\" onClick={decimal(\".\")}>.</button>\r\n            <button id=\"equals\" onClick={equals(operator)}>=</button>\r\n            <button id=\"clear\" onClick={clear}>AC</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pad;\r\n","import React, { useState } from 'react';\r\nimport Display from './Display.jsx';\r\nimport Pad from './Pad.jsx';\r\nimport './Calculator.css';\r\n\r\nconst Calculator = () => {\r\n\tconst [display, setDisplay] = useState(\"0\");\r\n\tconst [lastValue, setLastValue] = useState(\"0\");\r\n\tconst [operator, setOperator] = useState(\"\");\r\n\r\n  \treturn (\r\n    \t<div id=\"calculator\">\r\n\t\t\t<Display display={display} lastValue={lastValue} />\r\n\t    \t<Pad display={display} lastValue={lastValue} operator={operator} setDisplay={setDisplay} setLastValue={setLastValue} setOperator={setOperator} />\r\n    \t</div>\r\n    );\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport './App.css';\nimport Calculator from './Calculator.jsx';\n \nconst App = () => {\n  \treturn (\n    \t<div className=\"App\">\n\t\t\t<Calculator />\n    \t</div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}